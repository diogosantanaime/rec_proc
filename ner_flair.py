# -*- coding: utf-8 -*-
"""ner_flair.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_X51c-kGOdLGyIchA-Liq5u64dHtHJY0
"""

!pip install flair

from flair.data import Corpus
from flair.datasets import ColumnCorpus

columns = {0 : 'text', 1 : 'ner'}

data_folder = '/content/drive/MyDrive/dataset'

corpus: Corpus = ColumnCorpus(data_folder, columns,
                              train_file = 'ES.conll',
                              test_file = 'RJ.conll',
                              dev_file = 'SP.conll')

from flair.embeddings import WordEmbeddings, StackedEmbeddings, TokenEmbeddings, PooledFlairEmbeddings, FlairEmbeddings
from typing import List

tag_type = 'ner'
tag_dictionary = corpus.make_tag_dictionary(tag_type=tag_type)

embedding_types : List[TokenEmbeddings] = [
        #WordEmbeddings('glove'),
        FlairEmbeddings('news-forward'),
        FlairEmbeddings('news-backward'),
        #PooledFlairEmbeddings('news-forward', pooling='min'),
        #PooledFlairEmbeddings('news-backward', pooling='min'),
        ]
embeddings : StackedEmbeddings = StackedEmbeddings(
                                 embeddings=embedding_types)

from flair.models import SequenceTagger
tagger : SequenceTagger = SequenceTagger(hidden_size=256,
                                       embeddings=embeddings,
                                       tag_dictionary=tag_dictionary,
                                       tag_type=tag_type,
                                       use_crf=True)

print(tagger)

from flair.trainers import ModelTrainer
from flair.optim import SGDW
trainer : ModelTrainer = ModelTrainer(tagger, corpus)
trainer.train('resources/taggers/example-ner',
              learning_rate = 0.1,
              mini_batch_size = 32,
              optimizer=SGDW,
              max_epochs=150)

from flair.data import Sentence
from flair.models import SequenceTagger
# load the trained model
model = SequenceTagger.load('/content/resources/taggers/example-ner/final-model.pt')
# create example sentence
sentence = Sentence('This procedure is repeated for each item on the part list.')
# predict the tags
model.predict(sentence)
print(sentence.to_tagged_string())