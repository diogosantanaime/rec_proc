# -*- coding: utf-8 -*-
"""flair_conll03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vm317KlGez9POPLzyK401b-16hwFUZad
"""

!pip install flair

from flair.datasets import ColumnCorpus
from flair.embeddings import TokenEmbeddings, WordEmbeddings, StackedEmbeddings, FlairEmbeddings
from flair.models import SequenceTagger
from flair.trainers import ModelTrainer
from flair.data import Corpus
from typing import List
from flair.optim import SGDW

data_folder = "."

columns = {0: "text", 1: "ner"}

corpus = ColumnCorpus(data_folder, columns,
                      train_file="train.txt",
                      test_file="test.txt",
                      dev_file="valid.txt")

# Define o tipo de tag
tag_type = 'ner'

# Cria um dicionário de tags usando o corpus combinado
tag_dictionary = corpus.make_label_dictionary(label_type=tag_type)

# Define os tipos de embeddings desejados
embedding_types: List[TokenEmbeddings] = [
    #WordEmbeddings('glove'),
    FlairEmbeddings('news-forward'),
    FlairEmbeddings('news-backward'),
    #PooledFlairEmbeddings('news-forward', pooling='min'),
    #PooledFlairEmbeddings('news-backward', pooling='min'),
]

# Cria as embeddings empilhadas
embeddings: StackedEmbeddings = StackedEmbeddings(embeddings=embedding_types)

tagger : SequenceTagger = SequenceTagger(hidden_size=256,
                                       embeddings=embeddings,
                                       tag_dictionary=tag_dictionary,
                                       tag_type=tag_type,
                                       use_crf=True)

trainer: ModelTrainer = ModelTrainer(tagger, corpus)
trainer.train('resources/taggers/conll_03',
              learning_rate=0.1,  # Taxa de aprendizado
              mini_batch_size=32,  # Tamanho do mini-batch
              optimizer=SGDW,  # Otimizador
              max_epochs=10)  # Número máximo de épocas
